swagger: "2.0"
info:
  description: "My LegoÂ® Inventory was created by Teresa Bacigalupi (a LegoÂ® Technic fan) using the following tools:  Front-End: HTML5, CSS3, JavaScript ES6, jQuery; Back-End: Node.js, Express.js, Mocha, Chai, RESTful API Endpoints, MongoDB, Mongoose; Development Environment: Heroku, mLab, Robo 3T"
  version: "1.0.0"
  title: "Lego Inventory"
  termsOfService: "https://legoinventory.herokuapp.com/"
  contact:
    email: "teresabacigalupi@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "legoinventory.herokuapp.com"
basePath: "/"
tags:
# - name: "item"
#   description: "Operations about items"
#   externalDocs:
#     description: "Paste this YAML file into"
#     url: "http://editor.swagger.io"  
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"  
- name: "inventory-set"
  description: "Sets in the user's inventory"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io" 
- name: "inventory-moc"
  description: "MOCs in the user's inventory (MOC is ''My Original Creation'')"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"
- name: "inventory-part"
  description: "Sets in the user's inventory"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"
- name: "Store"
  description: "Access to Petstore orders"
schemes:
- "https"

paths:
  # /item/create:
  #   post:
  #     tags:
  #     - item
  #     summary: "Create a new set item"
  #     responses:
  #       500:
  #         description: "Internal server error"
  #       444:
  #         description: "Invalid part number"

  /users/create:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "Takes the name, username, and password from the ajax api call."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        500:
          description: "Internal server error"
  
  /users/login:
    post:
      tags:
      - "user"
      summary: "Log in a user"
      description: "Takes the username and password from the ajax api call."
      operationId: "loginUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "The password for login in clear text"
        required: true
        type: "string"      
        schema:
          $ref: "#/definitions/User"
      responses:
        401:
          description: "Not found"
        500:
          description: "Internal server error"
  
  /inventory-set/update-permanent-build:
    put:
      tags:
      - "inventory-set"
      summary: "Adds a new set"
      description: "Adds a new set to the inventory"
      operationId: "addSet"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "set_name"
        in: "formData"
        description: "Name of the Lego set"
        required: true
        type: string
      - name: "permanent_build"
        in: "formData"
        description: "The user wants the set to remain intact"
        required: false
        type: boolean
        # schema:
          # $ref: "#/definitions/User"
      responses:
        500:
          description: "Updating the permanent build failed"
        




  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        description: "at least 8 characters and no spaces"
      password:
        type: "string"
        description: "at least 8 characters and no spaces"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"