swagger: "2.0"
info:
  description: "My Lego® Inventory was created by Teresa Bacigalupi (a Lego® Technic fan) using the following tools:  Front-End: HTML5, CSS3, JavaScript ES6, jQuery; Back-End: Node.js, Express.js, Mocha, Chai, RESTful API Endpoints, MongoDB, Mongoose; Development Environment: Heroku, mLab, Robo 3T. [Item types are sets (boxed Lego sets), parts (individual Lego parts), and MOCS (My Original Creations  developed by fans of Lego®)]."
  version: "1.0.0"
  title: "Lego Inventory"
  termsOfService: "https://legoinventory.herokuapp.com/"
  contact:
    email: "teresabacigalupi@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "legoinventory.herokuapp.com"
basePath: "/"
tags:
- name: "item"
  description: "Operations about items"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"  
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"  
- name: "inventory-set"
  description: "Sets in the user's inventory"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io" 
- name: "inventory-moc"
  description: "MOCs in the user's inventory (MOC is ''My Original Creation'')"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"
- name: "inventory-part"
  description: "Sets in the user's inventory"
  externalDocs:
    description: "Paste this YAML file into"
    url: "http://editor.swagger.io"
schemes:
- "https"

paths:
  /item/create:
    post:
      tags:
      - "item"
      summary: "Create a new set item"
      description: "Takes the username, item number, and item type from the ajax api call."
      operationId: "createItem"
      consumes:
      - "application/x-www-form-urlencoded"      
      produces:
      - "application/json" 
      parameters:
      - name: "loggedInUserName"
        in: "formData"
        description: "The user's sign-in name"
        required: true
        type: "string"
      - name: "itemNum"
        in: "formData"
        description: "The number of the Lego item"
        required: true
        type: "string"  
      - name: "itemType"
        in: "formData"
        description: "The type of the Lego item (set, MOC or part)"
        required: true
        type: "string"              
        schema:
          $ref: "#/definitions/User"      
      responses:
        500:
          description: "Internal server error"
        444:
          description: "Invalid (set, MOC or) part number"

  /users/create:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "Takes the username and password from the ajax api call."
      operationId: "createUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user's username"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "The user's password in clear text"
        required: true
        type: "string"      
        schema:
          $ref: "#/definitions/User"
      responses:
        500:
          description: "Internal server error"
  
  /users/login:
    post:
      tags:
      - "user"
      summary: "Log in a user"
      description: "Takes the username and password from the ajax api call."
      operationId: "loginUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "The password for login in clear text"
        required: true
        type: "string"      
        schema:
          $ref: "#/definitions/User"
      responses:
        401:
          description: "Not found"
        500:
          description: "Internal server error"
  
  /inventory-set/update-permanent-build:
    put:
      tags:
      - "inventory-set"
      summary: "Add a new set"
      description: "Indicates this set is a permanent build"
      operationId: "updatePermanentBuild"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "set_name"
        in: "formData"
        description: "Name of the Lego set"
        required: true
        type: string
      - name: "permanent_build"
        in: "formData"
        description: "The user wants the set to remain intact"
        required: true
        type: boolean
        default: false
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "Returns updated set"        
        500:
          description: "Updating the permanent build failed"

  /inventory-set/add-storage-bin:
    put:
      tags:
      - "inventory-set"
      summary: "User adds a physical location for the set"
      description: "User can enter a physical location where they store this set"
      operationId: "addSetBin"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "set_num"
        in: "formData"
        description: "Number of the Lego set"
        required: true
        type: string
      - name: "storage_location"
        in: "formData"
        description: "User-added string for storage location"
        required: true
        type: string
        schema:
           $ref: "#/definitions/User"
      responses:
        204:
          description: "Returns updated set"        
        500:
          description: "Updating the storage location failed"

  /inventory-set/show-aggregate:
    get:
      tags:
      - "inventory-set"
      summary: "Access all the user's sets"
      description: "Retrieve all the user's sets"
      operationId: "showSets"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
        schema:
           $ref: "#/definitions/User"
      responses:      
        500:
          description: "Inventory set not found"        



definitions:

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        description: "at least 8 characters and no spaces"
      password:
        type: "string"
        description: "at least 8 characters and no spaces"

externalDocs:
  description: "For the Rebrickable API"
  url: "https://rebrickable.com/api/v3/docs/?key=4f8845c5d9212c179c08fe6f0e0d2d0c"